{
  
    
        "post0": {
            "title": "MacOS 更改預設文字編輯器",
            "content": "MacOS 更改預設文字編輯器 . 前因 . 因為慣用的文字編輯器為 Visual Studio Code ，且在多數時候需要開啟的文件不一定都是 text 的純文字檔，但仍需以VSCode開啟使用，無論是透過文件資訊修改開啟的應用程式、拖曳至Dock以 VSCode 開啟、甚至用 Automator 建立一個快速操作的腳本…都仍然不能滿足我的需求（因為還有各種 .xxxx 的檔案類型都算是純文字檔），但隨著新的技術之類的這種原因而造成這類的純文字檔越來越多種，一個一個改、每次都要經過一番操作才能用習慣的編輯器來開啟實在太累了，於是再努力一番搜索之後總算找到一些方式來修改MacOS的預設文字編輯器了（對我來說簡直完美，所以要趕快記下來，終於可以跟MacOS的文字編輯器說Bye Bye~） . 解決方式 . Homebrew 安裝 duti | . ❯ brew install duti . 取得 Visual Studio Code 的應用程式辨識資訊，等下會使用到 | 更多關於 CFBundleIdentifer 的說明 | . ❯ /usr/libexec/PlistBuddy -c &#39;Print CFBundleIdentifier&#39; /Applications/Visual Studio Code.app/Contents/Info.plist com.microsoft.VSCode . 用 duti 和剛剛取得的 com.microsoft.VSCode 來替 MacOS 修改預設的應用程式 | 將VSCode設為 檔案類型屬於 文字 的預設應用程式 | . ❯ duti -s com.microsoft.VSCode public.plain-text all . 沒有拓展名的檔案類型 | . ❯ duti -s com.microsoft.VSCode public.unix-executable all . 檔案類型屬於文字，但不是一般的 text 檔案 | . ❯ duti -s com.microsoft.VSCode public.data all . 如此一來就解決了每次要開啟 文字類型的檔案 ，但又不是 text 的檔案時，就能用自己慣用的文字編輯器開啟了。覺得舒服多了 .",
            "url": "https://nickburrows.github.io/fastpages5/markdown/2022/05/13/macos-chang-default-text-editor.html",
            "relUrl": "/markdown/2022/05/13/macos-chang-default-text-editor.html",
            "date": " • May 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "存取台灣 COVID-19 疫情數據並繪製疾管署趨勢圖表",
            "content": "quote:多數人透過實際聆聽音樂來了解其優美之處，但當他們被要求呈現統計數據時卻常常只秀出冷冰冰的音符，而不實際演奏這些音符所代表的音樂。|漢斯・羅斯林 . 我們在《真確》：如何用 30 秒了解台灣發展與全球趨勢時提過，一張設計良好的資訊圖表遠比一堆冷冰冰的統計數據更能為眾人提供價值。在這篇文章裡，你將了解如何透過幾行簡單的 Python 程式碼來取得與台灣相關的 COVID-19 數據，並製作與衛福部疾管署首頁相似的趨勢圖表。讀完本文你可以發揮自己的創意生成新的資訊圖表，進一步了解 COVID-19 疫情。 . img:intro/taiwan-cnc-numbers.jpg|desc:大家都很熟悉的畫面：台灣 COVID-19 最新疫情趨勢|dark|url:https://www.cdc.gov.tw/|source:衛福部疾管署首頁 . 這邊值得一提的是以上截圖並不反應最新疫情。事實上，圖中的實際數值也並不那麼重要。你只需稍微了解有哪些指標（確診數、送驗數等）以及兩張圖分別想要呈現的疫情趨勢即可。我們馬上就會透過 LeafLu 與眾多 PTT 鄉民辛勤為社會大眾整理的 Google 試算表來取得疾管署公布的最新疫情結果。以下就是我們即將存取的試算表： . img:intro/ppt-taiwan-covid-sheet.jpg|desc:眾多鄉民在 Google 試算表上整理的疫情數據，感謝他們的辛勤付出|dark|url:https://docs.google.com/spreadsheets/d/1Kp5IC5IEI2ffaOSZY1daYoi2u50bjUHJW-IgfHoEq8o/edit#gid=0 . 這個試算表定期更新台灣所有的確診案例以及其他相關疫情資訊，十分強大。另外注意我們即將使用的是分流版本的試算表，以盡可能減少對主要試算表的存取要求。你當然也可以自行打開該試算表並 Ctrl + C、Ctrl + V 複製自己想要的數據，但我們可以更聰明一點，用 Python 自動化這些步驟。 . &#20351;&#29992; Pandas &#23384;&#21462;&#35430;&#31639;&#34920;&#20839;&#23481; . quote:pandas 建立在 Python 程式語言之上，是一個快速、強大且具備彈性的資料分析與數據處理工具。pandas 也是資料科學家不可不掌握的數據處理利器之一。 . 整個專案我們都將使用資料科學家們已經十分熟悉的 pandas 來處理疫情相關的數據。如果這是你第一次知曉 pandas 並打算快速且有系統地學習，稍後可以參考資料科學家的 pandas 實戰手冊：掌握 40 個實用數據技巧。不過要用 pandas 存取公開的 Google 試算表十分容易。比方說我們現在想要取得台灣 COVID-19 的檢驗人數： . import pandas as pd # 用 pandas 的標準起手式 # Google 試算表的基本 url pattern GOOGLE_SHEET_URL = &quot;https://docs.google.com/spreadsheets/d/{}/export?gid={}&amp;format=csv&quot; FILE_URL = &quot;https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.csv&quot; # 透過 `pd.read_csv` 函式直接透過 url 將 Google 試算表轉成 DataFrame 並做簡單數據前處理 columns = [&#39;確定病名&#39;,&#39;個案研判日&#39;,&#39;縣市&#39;,&#39;鄉鎮&#39;,&#39;性別&#39;,&#39;是否為境外移入&#39;,&#39;年齡層&#39;,&#39;確定病例數&#39;] tests = ( pd.read_csv(FILE_URL) .loc[:, columns] # 這邊我們為了畫面簡潔只選出需要使用的欄位 ) # 補空值、將浮點數改為整數方便閱讀 tests.fillna(value={col: 0 for col in tests.columns[1:]}, inplace=True) # for col in tests.columns[1:]: # tests[col] = tests[col].astype(int) # 顯示最新幾天的檢驗數據 tests.tail() . 確定病名 個案研判日 縣市 鄉鎮 性別 是否為境外移入 年齡層 確定病例數 . 66022 嚴重特殊傳染性肺炎 | 2022/05/03 | 澎湖縣 | 馬公市 | 男 | 否 | 40-44 | 1 | . 66023 嚴重特殊傳染性肺炎 | 2022/05/03 | 澎湖縣 | 馬公市 | 男 | 否 | 5-9 | 1 | . 66024 嚴重特殊傳染性肺炎 | 2022/05/03 | 澎湖縣 | 馬公市 | 男 | 否 | 70+ | 1 | . 66025 嚴重特殊傳染性肺炎 | 2022/05/03 | 澎湖縣 | 湖西鄉 | 女 | 否 | 30-34 | 1 | . 66026 嚴重特殊傳染性肺炎 | 2022/05/03 | 澎湖縣 | 湖西鄉 | 女 | 否 | 35-39 | 1 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; import pandas as pd # 用 pandas 的標準起手式 FILE_URL = &quot;https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.csv&quot; columns = [&#39;個案研判日&#39;,&#39;是否為境外移入&#39;,&#39;確定病例數&#39;] tests = pd.read_csv(FILE_URL).loc[:, columns] tests.rename(columns={&quot;個案研判日&quot;: &quot;日期&quot;, &#39;是否為境外移入&#39;: &#39;境外&#39;, &#39;確定病例數&#39;: &#39;確診&#39;}, inplace=True) # 顯示最新幾天的檢驗數據 tests.tail() . 日期 境外 確診 . 66022 2022/05/03 | 否 | 1 | . 66023 2022/05/03 | 否 | 1 | . 66024 2022/05/03 | 否 | 1 | . 66025 2022/05/03 | 否 | 1 | . 66026 2022/05/03 | 否 | 1 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 沒錯，以往只能在觀測網站上看得到卻摸不到的疫情數據現在已經完全供你自由探索了。這一切都要感謝疾管署與廣大鄉民的辛勤更新以及 pandas 的直覺操作。值得一提的是 pandas 只能存取公開試算表，因此如果你想要存取的是私人試算表，可以考慮使用 pygsheets。 . 端看你存取檢驗人數這個工作表的時間點，最新一天的數據有可能還沒有被寫上日期。在匯總數據之前讓我們透過時間處理函式庫 Pendulum 來為最後一列（row）加上今日日期（如果有必要的話），並把所有日期更換為通用格式： . import pendulum # 給當前一天累計的確診數加上最新日期(如果還沒加的話) # 如果你現在不了解這段程式碼也沒有關係，只要知道輸出的 DataFrame 的長相就可以了 na = (tests[&#39;日期&#39;].isna()) prev = tests.loc[~na].tail(1)[&#39;日期&#39;].iloc[0] prev_dt = pendulum.date(*[int(s) for s in prev.split(&quot;/&quot;)]) latest_dt = prev_dt.add(days=1) tests.loc[na, [&#39;日期&#39;]] = f&quot;{latest_dt.month}/{latest_dt.day}&quot; # 將本來的日期字串改為更為通用的 `年年年年-月月-日日` 格式 # 很多繪圖函式庫能夠自動將這種格式的字串解析成對應的日期物件 # tests[&#39;日期&#39;] = tests[&#39;日期&#39;].str.split(&#39;/&#39;) # .apply(lambda x: pendulum.date(2022, int(x[0]), int(x[1])).format(&quot;YYYY-MM-DD&quot;)) # 我們這邊用 pandas 實戰手冊提過的 df.style 來強調修改後的日期欄位 (tests.tail(5) .style .applymap(lambda x: &#39;background-color: #075985&#39;, subset=[&#39;日期&#39;])) . &nbsp; 日期 境外 確診 . 66022 2022/05/03 | 否 | 1 | . 66023 2022/05/03 | 否 | 1 | . 66024 2022/05/03 | 否 | 1 | . 66025 2022/05/03 | 否 | 1 | . 66026 2022/05/03 | 否 | 1 | . 你很快就會看到以這種格式儲存日期資訊的方便之處。現在讓我們透過這個簡單表格來重現疾管署首頁展示的圖表。 . &#37325;&#29694;&#30142;&#31649;&#32626;&#20844;&#38283;&#30340;&#26368;&#26032;&#30123;&#24773;&#25976;&#25818; . 讓我們再次回顧一下疾管署所公布的 COVID-19 疫情圖表： . img:intro/taiwan-cnc-numbers.jpg|desc:衛福部疾管署公開的疫情數據|dark . 這邊我們簡單重現第一列「國內檢驗總計」裡頭的兩個指標：送驗以及確診。 . pd.DataFrame({ &#39;確診&#39;: [tests[&#39;確診&#39;].sum()], &#39;境外&#39;: [(tests[&#39;境外&#39;]==&#39;是&#39;).sum()], }) . 確診 境外 . 0 202402 | 4379 | . &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;24px&quot;viewBox=&quot;0 0 24 24&quot; width=&quot;24px&quot;&gt; &lt;/svg&gt; 沒什麼魔法。多虧了鄉民們的努力，基本上你能輕鬆計算出跟疾管署大致相同的結果。以我們的使用案例而言（簡單資料視覺化、查看整體趨勢等），小誤差並不會造成什麼不良影響。不過如果你要非常精準的數字，我還是建議你查看疾管署首頁。這邊的重點是你現在已經有能力取得足夠精準、即時的疫情數據並進行更多疫情分析了。 . 我們當然也能自行算出「昨日新增」的相關數據： . yesterday_dt = pendulum.yesterday(tz=&quot;Asia/Taipei&quot;).format(&quot;YYYY/MM/DD&quot;) # tests[(tests[&#39;日期&#39;] == yesterday_dt)] # tests.loc[tests[&#39;日期&#39;] == yesterday_dt] # tests = tests[(tests[&#39;日期&#39;] == yesterday_dt) &amp; (tests[&#39;境外&#39;] == &#39;是&#39;)] # tests = tests[tests[&#39;日期&#39;] == yesterday_dt] # cols = [&#39;確診&#39;, &#39;境外&#39;] # tests = tests[tests[cols].sum(axis=1) &gt; 0] # print(&quot; nDataframe after filtering n&quot;) # print(tests) tests[tests[&#39;日期&#39;] == yesterday_dt].loc[:, [&#39;日期&#39;, &#39;確診&#39;, &#39;境外&#39;]] my_df = pd.DataFrame({ &#39;確診&#39;: [tests[&#39;確診&#39;].sum()], &#39;境外&#39;: [(tests[&#39;境外&#39;]==&#39;是&#39;).sum()], }) print(&quot;日期:&quot;, yesterday_dt) print(my_df,&quot; n&quot;) . 日期: 2022/05/03 確診 境外 0 67 23 . 如同本文開頭所述，將疫情總結為一個統計數字固然強大，但當你想要暸解疫情趨勢時．僅僅秀出一個數字是不會有任何幫助的。這也是為何疾管署在確診人數下方還描繪了每日的確診人數變化，就是為了讓大眾能在掌握最新狀況的同時也能夠了解整體趨勢變化。 . 在下一節，我將展示你可以如何用 Python 來描繪相似的趨勢圖表。 . &#20351;&#29992; Altair &#32362;&#35069;&#30123;&#24773;&#36264;&#21218;&#22294; . quote:Altair 是一個建立在 Vega 與 Vega-Lite 之上，可以透過 Python 操作的宣告型統計視覺化函式庫（declarative statistical visualization library）。 . 依照使用情境以及當下心情（？），一般我會用不同的 Python 函式庫來視覺化手中數據，比方說大家耳熟能詳的 Matplotlib、Seaborn 或是強調互動性的 Plotly。我也曾介紹過由 Spotify 開源，跟 Altair 一樣用宣告型語法繪圖的 Chartify。但如果現在要我向你推薦一個 Python 函式庫的話，我會說：「去學學 Altair 吧！」 . img:intro/altair_official_page.jpg|desc:Altair 允許我們透過 Python 實現宣告型資料視覺化|url:https://altair-viz.github.io/index.html|source:Altair 官方說明文件|dark Altair 官方說明文件 . Altair 有幾個我認為值得特別列出來的優點： . 宣告型語法易上手、直覺，客製化能力強 | 使用心法符合我們之前討論過的圖像分層文法 | 預設樣式優美，不像 Matplotlib 得自己修東修西 | 具備跟 R 語言的 ggplot2 一樣強大的 facet 功能 | 能輕易加入互動機制，且寫法比 Plotly 來得 Pythonic | . 在 COVID-19 的系列文章裡，我會展示各種你可以透過 Altair 來輕鬆繪製的美麗圖表。事不宜遲，讓我們再次將目光放到疾管署右側的監測趨勢圖上。該圖將每天的送驗次數依照通報來源分為三種類別： . 居家檢疫送驗 | 擴大監測送驗 | 法定傳染病通報 | . img:intro/taiwan-cnc-numbers.jpg|desc:現在請先關注右圖：依據通報來源的每日送驗次數|dark . 要自己生成這個趨勢圖並不難，因為我們手上已經有各通報來源的每日送驗數目： . # 用來強調接著會使用的欄位的樣式函式，讀者不需細讀這段程式碼 def highlight_column(data, color=&quot;rgb(153, 255, 51)&quot;): attr = &#39;background-color: {}&#39;.format(color) return [attr for v in data] (tests.tail().style .apply(highlight_column, subset=[&quot;居檢送驗&quot;, &quot;武肺通報&quot;, &quot;擴大監測&quot;], axis=1) ) . . 日期 檢驗人數 確診人數 居檢送驗 居檢送驗累計 武肺通報 武肺通報累計 擴大監測 擴大監測累計 . 101 2020-04-26 | 495 | 0 | 0 | 1707 | 71 | 13957 | 424 | 45259 | . 102 2020-04-27 | 742 | 0 | 0 | 1707 | 76 | 14033 | 666 | 45925 | . 103 2020-04-28 | 694 | 0 | 0 | 1707 | 98 | 14131 | 596 | 46521 | . 104 2020-04-29 | 486 | 0 | 0 | 1707 | 73 | 14204 | 413 | 46934 | . 105 2020-04-30 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 在使用 Altair 畫圖前我們得將數據轉成 tidy 格式，就跟我們之前使用 Chartify 一樣。tidy 數據具有以下 2 特性： . 1 變數只存在 1 欄裡頭（1 variable in a column） | 1 列代表 1 個觀測結果（1 observation in a row） | . 這邊我們關注的變數是一個有三種可能值的「通報來源」。一般會利用 pandas 的 melt 函式來產生 tidy 數據： . data = ( tests .rename({ # 用跟疾管署一致的 naming convention &#39;擴大監測&#39;: &#39;擴大監測送驗&#39;, &#39;居檢送驗&#39;: &#39;居家檢驗送驗&#39;, &#39;武肺通報&#39;: &#39;法定傳染病通報&#39;, }, axis=1) # 這邊的關鍵是使用 `melt` 來建立 `通報來源` 變數 .melt(&#39;日期&#39;, [&#39;擴大監測送驗&#39;, &#39;居家檢驗送驗&#39;, &#39;法定傳染病通報&#39;], var_name=&#39;通報來源&#39;, value_name=&quot;通報數&quot;) .fillna(0) ) data.tail() . 日期 通報來源 通報數 . 313 2020-04-26 | 法定傳染病通報 | 71 | . 314 2020-04-27 | 法定傳染病通報 | 76 | . 315 2020-04-28 | 法定傳染病通報 | 98 | . 316 2020-04-29 | 法定傳染病通報 | 73 | . 317 2020-04-30 | 法定傳染病通報 | 0 | . 在 data 裡頭，每一列都代表著某個通報來源在某一天的通報數。有了 tidy 格式的 DataFrame 後，要用 Altair 繪製 COVID-19 的每日監測趨勢就變得十分容易了。我們只需將數據中的變數對應到想要呈現的視覺變數上就可以了： . import altair as alt # 使用 altair 的標準起手式 _ = alt.renderers.set_embed_options(actions=False) # 隱藏下載圖片的按鈕以節省空間 alt.Chart(data).mark_bar( # 繪製柱狀圖 # 將數據變數編碼（encode）到視覺變數上 ).encode( x=&quot;日期:T&quot;, # 將日期對應到 x 軸上 y=&quot;通報數:Q&quot;, # 將通報數對應到 y 軸上 color=&quot;通報來源:N&quot; # 將通報來源對應到顏色 # 設置整個圖的屬性 ).properties( width=700 # 圖表寬度 ) . 沒錯，我們剛剛用 Altair 生成了第一個 COVID-19 圖表！透過上圖我們也能清楚地觀察到在今年 2 月中旬後擴大監測的通報數明顯上升，而法定傳染病通報則在 3 月中旬後達到巔峰。這是我們無法從試算表一眼看出的趨勢。 . 就算這是你第一次知曉 Altair，我相信搭配註解你會同意其使用方式十分直覺；忽略註解你也可以發現能用非常簡潔的宣告型語法（declarative syntax）來繪製出高品質的圖表： . # 去除註解的最簡 Altair 繪圖呼叫方式 alt.Chart(data).mark_bar().encode( x=&quot;日期:T&quot; y=&quot;通報數:Q&quot; color=&quot;通報來源:N&quot; ) . 沒錯，用 Altair 做資料視覺化就是那麼地樸實無華，簡單到可能有些資料科學家都不想跟你分享這個強大工具，以免失去工作(笑 . 我們之前在淺談資料視覺化以及 ggplot2 實踐就已經說過： . quote:資料視覺化是將數據映射到視覺變數，進而有效且有意義地呈現數據的真實面貌。 . 透過 Altair 直覺的宣告型語法，我們可以專心思考如何用最有效的視覺變數來呈現數據，而不是將寶貴的精力花在微調樣式上面。有趣的是，Altair 的核心思想跟我們之前聊過用 SQL 抽取數據的精神是完全一致的： . Altair: 告訴程式你要畫什麼圖表，而不是如何畫 | SQL：告訴程式你要拿什麼數據，而不是如何拿 | . 兩者都可以讓我們專注在最重要的目的（what），而不是手法（how）。 . 另外注意我們用 日期:T 來告訴 Altair 日期 這欄位的數據類型為時間（Time），且因為我們已經事先把代表日期的字串轉成通用的 YYYY-MM-DD 格式， Altair 在繪圖時能夠自動解析日期並呈現如上圖 x 軸的美麗結果（你可以拉回去看看）。其他數據類型都很直覺，這邊就不再一一贅述。 . img:intro/altair_encoding_data_type.jpg|desc:Altair 定義的數據類型|url:https://altair-viz.github.io/user_guide/encoding.html#encoding-data-types|source:Altair 官方說明文件|dark . 你已經看到要用 Altair 繪製基本的圖表有多麽地簡單。但 Altair 更厲害的地方在於你可以輕易地客製化原來的圖表，比方說改變 x 軸渲染的日期格式、添增提示框等新的互動效果： . chart_title = &quot;COVID-19（武漢肺炎）監測趨勢圖 - 依通報來源&quot; alt.Chart(data, title=chart_title).mark_bar() .encode( x=alt.X(&#39;日期:T&#39;, title=&quot;通報日&quot;, axis=alt.Axis( grid=False, # 去除縱軸的格線 format=&quot;%m/%d&quot;, # 自定義日期格式 )), y=&quot;通報數:Q&quot;, color=&#39;通報來源:O&#39;, # 將通報來源視為有序類別 tooltip=[&#39;日期:T&#39;, &#39;通報來源&#39;, &#39;通報數&#39;] # 加上提示框 ).properties( width=700 ) . 至此，我們完整地重現了疾管署首頁所呈現的 COVID-19 監測趨勢圖。透過添加 tooltip 參數，你現在還可以將滑鼠移動至圖上查看各個通報來源的實際數值；這次我們則將通報來源視為有序變數（ordinal variable），讓 Altair 自動套用相同色系的漸層效果，強調檢測能量分別在 2 月以及 3 月中旬有強化的趨勢。 . 進度 50 %。接著讓我們重現疾管署公布的境內外確診人數趨勢： . img:intro/taiwan-cnc-numbers.jpg|desc:現在關注左圖：依據境內外做區別的每日確診人數|dark . 左圖依照發病日期展示了台灣每天境內外的確診人數趨勢。要重現這張趨勢圖，我們得先想辦法拿到相對應的境內外確診數據。這次我們將存取公開試算表中的臺灣武漢肺炎病例工作表： . cases = ( pd.read_csv(GOOGLE_SHEET_URL.format( &quot;1Kp5IC5IEI2ffaOSZY1daYoi2u50bjUHJW-IgfHoEq8o&quot;, 0 # `臺灣武漢肺炎病例` 工作表的 gid )) .loc[:, [&#39;出現症狀日期&#39;, &#39;案例&#39;, &#39;來源&#39;, &#39;性別&#39;, &#39;年齡&#39;]] ) # 這邊忽略沒有記載出現症狀日期的案例 cases = cases.loc[~cases[&#39;出現症狀日期&#39;].isna()] cases = cases.loc[cases[&#39;出現症狀日期&#39;].apply(lambda x: not &#39;x&#39; in x)] # 處理時間欄位的字串讓 Altair 等等可以正確解析日期 cases[&#39;出現症狀日期&#39;] = cases[&#39;出現症狀日期&#39;] .apply(lambda x: &#39;-&#39;.join([&#39;2020&#39;, *x.split(&quot;/&quot;)])) cases.tail() . 出現症狀日期 案例 來源 性別 年齡 . 423 2020-4-5 | #424 | 敦睦 n遠訓 | 女 | 3X | . 424 2020-3-23 | #425 | 敦睦 n遠訓 | 男 | 2X | . 425 2020-3-23 | #426 | 敦睦 n遠訓 | 男 | 2X | . 426 2020-4-19 | #427 | 敦睦 n遠訓 | 男 | 2X | . 427 2020-4-22 | #428 | 敦睦 n遠訓 | 男 | 3X | . 很明顯地，cases 裡的每一列都代表著一個特定的台灣確診案例。而因為我們想要了解的是每一天每個通報來源的案例總數，還得使用 pandas 的 groupby 函式將 cases 依據出現症狀日期 &amp; 來源分組並分別加總案例數： . data = ( cases .groupby([&#39;出現症狀日期&#39;, &#39;來源&#39;])[&#39;案例&#39;] .count() .reset_index() ) data.tail() . 出現症狀日期 來源 案例 . 85 2020-4-4 | 境外 | 6 | . 86 2020-4-4 | 本土 | 1 | . 87 2020-4-5 | 境外 | 1 | . 88 2020-4-5 | 敦睦 n遠訓 | 1 | . 89 2020-4-6 | 境外 | 1 | . 就跟前面通報來源的例子相同，現在 data 已經是我們想要的 tidy 格式，因此可以馬上使用 Altair 描繪趨勢圖： . title = &quot;嚴重特殊性傳染性肺炎確診個案趨勢圖 - 依發病日&quot; alt.Chart(data, title=title).mark_bar() .encode( x=alt.X(&#39;出現症狀日期:T&#39;, title=&quot;發病日&quot;, axis=alt.Axis( grid=False, format=&quot;%m/%d&quot;)), y=&#39;案例:Q&#39;, color=&#39;來源:N&#39;, tooltip=[&#39;出現症狀日期:T&#39;, &#39;來源&#39;, &#39;案例&#39;] ).properties( width=700 ) . 畫出圖後境內外的確診人數趨勢一目了然。儘管今年 3 月起境外確診案例突增，本土感染的案例比例仍舊很低，表示台灣還沒有大規模社區傳播的現象存在。 . 另外從發病日來看，今年 3 月中旬的爆發已漸平緩。值得一提的是疾管署並未將 4 月中旬海軍敦睦艦隊官兵的感染事件列在境內或境外，而是另開分類。因此疾管署首頁上的境內外趨勢圖是沒有顯示敦睦類別的。（國內檢驗項目的確診數則有反應上去） . 好啦！至此我們已經將疾管署網站上跟台灣相關的 COVID-19 疫情圖表完整地重現出來了。現在讓我們做點總結。 . &#26368;&#22823;&#21270;&#20844;&#38283;&#25976;&#25818;&#30340;&#20729;&#20540;&#65306;&#29694;&#22312;&#36650;&#21040;&#20320;&#20102; . quote:要讓公開數據發揮最大價值，我們得讓每位公民都能輕鬆存取並理解這些數據。 . 在這篇文章裡我向你簡單地展示了如何透過 Python （主要使用 pandas 以及 Altair） 來有效率地存取、處理並視覺化台灣 COVID-19 疫情的公開數據。作者自己雖非流行病學專業也不是公共衛生相關出身，但看到社會上有那麼多各行各業的抗役英雄，便希望也能用自己的方式為這次的抗疫做出點微薄貢獻。希望這篇文章能鼓勵更多人深入了解並分析 COVID-19 疫情，進而為社會帶來新的洞見。 . img:intro/left-nav-demo.jpg|desc:使用桌筆電閱讀的讀者可以善用左側導覽功能|dark . 我想你現在已經具備能夠探索台灣 COVID-19 疫情數據的基本能力了。我也相信透過讓更多人參與並了解疫情能對我們的社會帶來一些正面的影響。你現在有幾件事情可以做： . 查看廣大鄉民整理的台灣疫情 Google 試算表以深入了解疫情 | 回到文章開頭或利用左側導覽點擊 Colab 連結，抓取感興趣的數據分析 | 分享本文以讓更多人能夠參與研究台灣新冠疫情並最大化公開數據價值 | . 另外如果你擔心自己對新型冠狀病毒或是傳染病的科普知識不足，我強力推薦先花 1 小時在 hahow 好學校平台上與陳建仁副總統學習防疫的基本知識： . img:intro/hahow-open-course-vice-president.jpg|desc:全民防疫通識課：陳建仁副總統來開講|source:hahow 好學校|url:https://hahow.in/courses/5e8d70a52aa77e6f34d6fded/main . 好啦，本章節就到此告一段落！ . 我們在下一章會利用此章學到的數據處理技巧進一步對台灣 COVID-19 疫情做些新的視覺化與簡單分析。在那之前別忘了隨時做好自主健康管理，有任何回饋、新的視覺化圖表的建議也請讓我知道！我們下次見：） .",
            "url": "https://nickburrows.github.io/fastpages5/%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/altair/pandas/2022/05/13/covid-19.html",
            "relUrl": "/%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96/altair/pandas/2022/05/13/covid-19.html",
            "date": " • May 13, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nickburrows.github.io/fastpages5/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nickburrows.github.io/fastpages5/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nickburrows.github.io/fastpages5/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nickburrows.github.io/fastpages5/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}